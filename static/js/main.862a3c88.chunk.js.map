{"version":3,"sources":["tokenApi.ts","utils.js","brandIcon.svg","LoginScreen.tsx","PaymentScreen.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["connection","url","clusterApiUrl","PROGRAM_PUBLIC_KEY","PublicKey","clockAccountKey","dataLayout","BufferLayout","struct","u32","s32","nu64","space","span","establishConnection","a","Connection","getVersion","version","console","log","getStreamBalance","account","getAccountInfo","accountInfo","data","info","decode","Buffer","from","staticBal","Number","numGreets","toString","flow","lastTranTime","timestamp","addBalance","address","payerAccount","toBase58","commandDataLayout","u8","alloc","encodeLength","encode","instruction","slice","TransactionInstruction","keys","pubkey","isSigner","isWritable","programId","sendAndConfirmTransaction","Transaction","add","commitment","preflightCommitment","addBalanceResponse","window","location","reload","startFlow","senderPubKey","receiverPubKey","startFlowTransaction","createProgramAc","senderAccount","Account","publicKey","getMinimumBalanceForRentExemption","lamports","transaction","SystemProgram","createAccount","fromPubkey","newAccountPubkey","transactionId","fromHexString","hexString","Uint8Array","match","map","byte","parseInt","useStyles","makeStyles","theme","loginButton","marginTop","spacing","icon","maxHeight","LoginScreen","setPrivateKey","classes","useState","torus","setTorus","triggerLogin","typeOfLogin","clientId","verifier","loginDetails","solanaPrivateKey","nacl","sign","keyPair","fromSeed","privateKey","padStart","secretKey","stringKey","localStorage","setItem","useHistory","useEffect","torusdirectsdk","TorusSdk","baseUrl","origin","network","enableLogging","init","skipSw","initTorus","className","src","brandIcon","Typography","variant","Button","color","onClick","root","flexGrow","paper","height","width","control","padding","balances","margin","flowButton","flowButtonGroup","tokenCount","airdropButton","PaymentScreen","parsedKey","split","value","senderKey","setSenderKey","receiverKey","setReceiverKey","senderBal","setSenderBal","receiverBal","setReceiverBal","setPublicKey","localStorageKey","setter","keyString","getItem","newPublicKey","getBalance","lamportBal","minimumBal","requestAirdrop","airdropResp","setBalanceListener","timer","setInterval","timeDiff","Math","floor","Date","now","clearInterval","setupAccounts","Grid","container","justify","item","xs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.862a3c88.chunk.js","sourcesContent":["import {\n    Account,\n    Connection,\n    PublicKey,\n    SystemProgram,\n    TransactionInstruction,\n    Transaction,\n    sendAndConfirmTransaction,\n    clusterApiUrl,\n} from '@solana/web3.js'\n// @ts-ignore\nimport BufferLayout from 'buffer-layout'\n\nconst url = clusterApiUrl('devnet')\nexport let connection: Connection\n\nconst PROGRAM_ID = 'ugSaSJkZZ2HjfrZguYUxJRT78bs7TFPbj2vg47RYvVk'\nconst PROGRAM_PUBLIC_KEY = new PublicKey(PROGRAM_ID)\n\n// To get current time\nconst clockAccountKey = new PublicKey('SysvarC1ock11111111111111111111111111111111')\n\nconst dataLayout = BufferLayout.struct([\n    BufferLayout.u32('numGreets'),\n    BufferLayout.s32('flow'),\n    BufferLayout.nu64('timestamp'),\n])\nconst space = dataLayout.span\n\nexport async function establishConnection(): Promise<void> {\n    connection = new Connection(url, 'singleGossip')\n    const version = await connection.getVersion()\n    console.log('Connection to cluster established:', url, version)\n}\n\nexport async function getStreamBalance(account: PublicKey) {\n    const accountInfo = await connection.getAccountInfo(account)\n    if (accountInfo === null) {\n        throw 'Error: cannot find the greeted account'\n    }\n    console.log('Raw account info', accountInfo.data)\n    const info = dataLayout.decode(Buffer.from(accountInfo.data))\n    const staticBal = Number(info.numGreets.toString())\n    const flow = Number(info.flow.toString())\n    const lastTranTime = Number(info.timestamp.toString())\n    console.log('Static balance', staticBal)\n    console.log('Flow', flow)\n    console.log('Last time(saved)', lastTranTime)\n\n    return {staticBal, flow, lastTranTime}\n}\n\nexport async function addBalance(address: PublicKey, payerAccount: Account) {\n    console.log('Adding balance to', address.toBase58())\n\n    const commandDataLayout = BufferLayout.struct([\n        BufferLayout.u8('instruction')\n    ])\n    let data = Buffer.alloc(1024)\n    {\n        const encodeLength = commandDataLayout.encode(\n            {\n                instruction: 1,\n            },\n            data,\n        )\n        data = data.slice(0, encodeLength)\n    }\n\n    const instruction = new TransactionInstruction({\n        keys: [\n            { pubkey: clockAccountKey, isSigner: false, isWritable: false },\n            { pubkey: address, isSigner: false, isWritable: true },\n        ],\n        programId: PROGRAM_PUBLIC_KEY,\n        data,\n    })\n\n    const addBalanceResponse = await sendAndConfirmTransaction(\n        connection,\n        new Transaction().add(instruction),\n        [payerAccount],\n        {\n            commitment: 'singleGossip',\n            preflightCommitment: 'singleGossip',\n        },\n    )\n    console.log('Response', addBalanceResponse)\n\n    window.location.reload(false)\n}\n\nexport async function startFlow(\n    flow: number,\n    senderPubKey: PublicKey,\n    receiverPubKey: PublicKey,\n    payerAccount: Account\n    ) {\n    console.log('Creating flow from', senderPubKey.toBase58(), 'to', receiverPubKey.toBase58())\n\n    const commandDataLayout = BufferLayout.struct([\n        BufferLayout.u8('instruction'),\n        BufferLayout.u8('flow')\n    ])\n    let data = Buffer.alloc(1024)\n    {\n        const encodeLength = commandDataLayout.encode(\n            {\n                instruction: 2,\n                flow\n            },\n            data,\n        )\n        data = data.slice(0, encodeLength)\n    }\n\n    const instruction = new TransactionInstruction({\n        keys: [\n            { pubkey: clockAccountKey, isSigner: false, isWritable: false },\n            { pubkey: senderPubKey, isSigner: false, isWritable: true },\n            { pubkey: receiverPubKey, isSigner: false, isWritable: true }\n        ],\n        programId: PROGRAM_PUBLIC_KEY,\n        data,\n    })\n    const startFlowTransaction = await sendAndConfirmTransaction(\n        connection,\n        new Transaction().add(instruction),\n        [payerAccount],\n        {\n            commitment: 'singleGossip',\n            preflightCommitment: 'singleGossip',\n        },\n    )\n    console.log('Response', startFlowTransaction)\n    window.location.reload(false)\n}\n\nexport async function createProgramAc(payerAccount: Account) {\n    const senderAccount = new Account()\n    const senderPubKey = senderAccount.publicKey\n    console.log('Creating sender account', senderPubKey.toBase58())\n\n    const lamports = await connection.getMinimumBalanceForRentExemption(\n        dataLayout.span,\n    )\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payerAccount.publicKey,\n            newAccountPubkey: senderPubKey,\n            lamports,\n            space,\n            programId: PROGRAM_PUBLIC_KEY,\n        }),\n    )\n    const transactionId = await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payerAccount, senderAccount],\n        {\n            commitment: 'singleGossip',\n            preflightCommitment: 'singleGossip',\n        },\n    )\n    console.log('Create account transaction ID', transactionId)\n\n    return senderPubKey\n}","export function fromHexString(hexString) {\n    return new Uint8Array(hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)))\n}","export default __webpack_public_path__ + \"static/media/brandIcon.ac21c50e.svg\";","import { useEffect, useState } from 'react'\nimport TorusSdk from '@toruslabs/torus-direct-web-sdk'\nimport nacl from 'tweetnacl'\nimport { Button, makeStyles, Typography } from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport './App.css'\nimport { fromHexString } from './utils'\nimport brandIcon from './brandIcon.svg'\n\nconst useStyles = makeStyles((theme) => ({\n  loginButton: {\n    marginTop: theme.spacing(5)\n  },\n  icon: {\n    maxHeight: theme.spacing(7)\n  }\n}))\n\ntype Props = {\n  setPrivateKey: React.Dispatch<React.SetStateAction<string | null>>\n}\nfunction LoginScreen({ setPrivateKey }: Props) {\n  const classes = useStyles()\n  const [torus, setTorus] = useState<TorusSdk>()\n  const history = useHistory()\n\n  useEffect(() => {\n    async function initTorus() {\n      const torusdirectsdk = new TorusSdk({\n        baseUrl: `${window.location.origin}/serviceworker`,\n        network: 'testnet',\n        enableLogging: true,\n      })\n\n      await torusdirectsdk.init({ skipSw: false })\n      setTorus(torusdirectsdk)\n    }\n    initTorus()\n  }, [])\n\n  async function login() {\n    console.log('Torus', torus)\n    const loginDetails = await torus!.triggerLogin({\n      typeOfLogin: 'google',\n      clientId: '200932224620-4klf8kflcdqic8t1dptivlj55gds2ml0.apps.googleusercontent.com',\n      verifier: 'solana-streaming-token',\n    })\n    const solanaPrivateKey = nacl.sign.keyPair.fromSeed(fromHexString(loginDetails.privateKey.padStart(64))).secretKey\n\n    const stringKey = '' + solanaPrivateKey\n    console.log('Stringified key', stringKey)\n    window.localStorage.setItem('privateKey', stringKey)\n    setPrivateKey(stringKey)\n  }\n\n  return (\n    <div className='App'>\n      {\n        torus && <>\n          <img src={brandIcon} className={classes.icon}/>\n          <Typography variant='h4'>SolarStream</Typography>\n          <Typography variant='h6'>Streamable tokens on Solana</Typography>\n        <Button variant='contained' color='primary' onClick={login} className={classes.loginButton}>Login with Google</Button>\n        </>\n      }\n    </div>\n  )\n}\n\nexport default LoginScreen\n","import { Account, PublicKey } from '@solana/web3.js'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport { Button, Typography } from '@material-ui/core'\nimport { addBalance, connection, createProgramAc, establishConnection, getStreamBalance, startFlow } from './tokenApi'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        height: 140,\n        width: 100,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n    balances: {\n        margin: theme.spacing(10),\n    },\n    address: {\n        marginTop: theme.spacing(1),\n    },\n    flowButton: {\n        margin: theme.spacing(2),\n    },\n    flowButtonGroup: {\n        marginTop: theme.spacing(1),\n    },\n    tokenCount: {\n        marginTop: theme.spacing(2),\n    },\n    airdropButton: {\n        marginTop: theme.spacing(1),\n    },\n}))\n\ntype Props = {\n    privateKey: string\n}\nexport default function PaymentScreen({ privateKey }: Props) {\n    const classes = useStyles()\n    const parsedKey = privateKey.split(',').map(value => Number(value))\n    const account = new Account(parsedKey)\n\n    const [senderKey, setSenderKey] = useState<PublicKey>()\n    const [receiverKey, setReceiverKey] = useState<PublicKey>()\n\n    const [senderBal, setSenderBal] = useState(0)\n    const [receiverBal, setReceiverBal] = useState(0)\n\n    async function setPublicKey(\n        localStorageKey: string,\n        setter: React.Dispatch<React.SetStateAction<PublicKey | undefined>>\n    ) {\n        console.log('Settig public key for', localStorageKey)\n\n        const keyString = window.localStorage.getItem(localStorageKey)\n        if (keyString) {\n            console.log('Stored', localStorageKey, ':', keyString)\n            setter(new PublicKey(keyString))\n        } else {\n            console.log('No account found, creating new')\n            const newPublicKey = await createProgramAc(account)\n            window.localStorage.setItem(localStorageKey, newPublicKey.toBase58())\n            setter(newPublicKey)\n        }\n    }\n\n    async function startFlowHandler() {\n        if(senderKey && receiverKey) {\n            await startFlow(1, senderKey, receiverKey, account)\n        }\n    }\n\n    async function stopFlowHandler() {\n        if (senderKey && receiverKey) {\n            await startFlow(0, senderKey, receiverKey, account)\n        }\n    }\n\n    async function checkLamportBalance() {\n        const lamportBal = await connection.getBalance(account.publicKey)\n        console.log('Lamport balance', lamportBal)\n        const airdropResp = await connection.requestAirdrop(account.publicKey, 100000000)\n        console.log('Airdrop response', airdropResp)\n    }\n\n    async function setupAccounts() {\n        const lamportBal = await connection.getBalance(account.publicKey)\n        console.log('Lamport balance', lamportBal)\n        const minimumBal = 100000000\n\n        if (lamportBal < minimumBal) {\n            const airdropResp = await connection.requestAirdrop(account.publicKey, minimumBal)\n            console.log('Airdrop response', airdropResp)\n        }\n        setPublicKey('senderKey', setSenderKey)\n        setPublicKey('receiverKey', setReceiverKey)\n    }\n\n    useEffect(() => {\n        establishConnection()\n        setupAccounts()\n    }, [])\n\n    async function setBalanceListener(setter: React.Dispatch<React.SetStateAction<number>>, publicKey?: PublicKey) {\n        if (publicKey) {\n            const { staticBal, flow, lastTranTime } = await getStreamBalance(publicKey)\n            const timer = setInterval(() => {\n                let timeDiff = 0\n                if (lastTranTime) {\n                    const currentTime = Math.floor(Date.now() / 1000)\n                    timeDiff = currentTime - lastTranTime\n                }\n                const bal = staticBal + timeDiff * flow\n                setter(bal)\n            }, 1000)\n            return () => clearInterval(timer)\n        } else {\n            console.log('Account not yet set')\n        }\n    }\n\n    async function addTokens() {\n        if(senderKey) {\n            await addBalance(\n                senderKey, account\n            )\n        }\n\n    }\n\n    useEffect(() => {\n        console.log('Getting sender balance')\n        setBalanceListener(setSenderBal, senderKey)\n    }, [senderKey])\n\n    useEffect(() => {\n        console.log('Getting receiver balance')\n        setBalanceListener(setReceiverBal, receiverKey)\n    }, [receiverKey])\n\n\n    return(\n        <Grid container justify='center' className={classes.root} spacing={1}>\n            <Grid item xs={12} className={classes.address}>\n                <Typography variant=\"subtitle1\">Account: {account.publicKey.toBase58()}</Typography>\n            </Grid>\n\n            <Grid item xs={12} className={classes.balances}>\n                <Grid container justify='center' spacing={10}>\n                    <Grid item xs={4}>\n                        <Typography variant='h4'>Sender</Typography>\n                        <Typography variant='h5' className={classes.tokenCount}>{senderBal} coins</Typography>\n                        <Button variant='outlined' color='primary' className={classes.airdropButton} onClick={addTokens}>\n                            +50 Airdrop\n                        </Button>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <Typography variant='h4'>Receiver</Typography>\n                        <Typography variant='h5' className={classes.tokenCount}>{receiverBal} coins</Typography>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.flowButtonGroup}>\n                <Button variant='contained' color='primary' className={classes.flowButton} onClick={startFlowHandler}>\n                    Flow\n                </Button>\n                <Button variant='contained' color='secondary' className={classes.flowButton} onClick={stopFlowHandler}>\n                    Stop\n                </Button>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { Fragment, useState } from 'react'\n\nimport './App.css';\nimport LoginScreen from './LoginScreen'\nimport PaymentScreen from './PaymentScreen'\n\nexport default function App() {\n  const [privateKey, setPrivateKey] = useState(\n    window.localStorage.getItem('privateKey')\n  )\n\n  return(\n    <Fragment>\n      {\n        privateKey\n          ? <PaymentScreen privateKey={privateKey} />\n          : <LoginScreen setPrivateKey={setPrivateKey} />\n      }\n    </Fragment>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}